{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction fetchAPI(_x) {\n  return _fetchAPI.apply(this, arguments);\n}\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    var _ref,\n        variables,\n        res,\n        json,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, variables = _ref.variables;\n            _context.next = 3;\n            return fetch(\"\".concat(process.env.API_URL, \"/graphql\"), {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                query: query,\n                variables: variables\n              })\n            });\n\n          case 3:\n            res = _context.sent;\n            _context.next = 6;\n            return res.json();\n\n          case 6:\n            json = _context.sent;\n\n            if (!json.errors) {\n              _context.next = 10;\n              break;\n            }\n\n            console.error(json.errors);\n            throw new Error(\"Failed to fetch API\");\n\n          case 10:\n            return _context.abrupt(\"return\", json.data);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}\n\nexport function getArticles() {\n  return _getArticles.apply(this, arguments);\n}\n\nfunction _getArticles() {\n  _getArticles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetchAPI(\"query Articles {\\n    articles {\\n      id\\n      title\\n      content\\n      category {\\n        id\\n        name\\n      }\\n      image {\\n        url\\n        alternativeText\\n      }\\n    }\\n  }\");\n\n          case 2:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data.articles);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getArticles.apply(this, arguments);\n}\n\nexport function getArticle(_x2) {\n  return _getArticle.apply(this, arguments);\n}\n\nfunction _getArticle() {\n  _getArticle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetchAPI(\"query Articles($id: ID!) {\\n    article(id: $id) {\\n      id\\n      title\\n      content\\n      image {\\n        url\\n        alternativeText\\n      }\\n      category {\\n        id\\n        name\\n      }\\n      published_at\\n    }\\n  }\", {\n              variables: {\n                id: id\n              }\n            });\n\n          case 2:\n            data = _context3.sent;\n            return _context3.abrupt(\"return\", data.article);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getArticle.apply(this, arguments);\n}\n\nexport function getCategories() {\n  return _getCategories.apply(this, arguments);\n}\n\nfunction _getCategories() {\n  _getCategories = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return fetchAPI(\"query Categories {\\n    categories {\\n      id\\n      name\\n    }\\n  }\");\n\n          case 2:\n            data = _context4.sent;\n            return _context4.abrupt(\"return\", data.categories);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getCategories.apply(this, arguments);\n}\n\nexport function getCategory(_x3) {\n  return _getCategory.apply(this, arguments);\n}\n\nfunction _getCategory() {\n  _getCategory = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(id) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return fetchAPI(\"query Category($id: ID!) {\\n    category(id: $id) {\\n      id\\n      name\\n      articles {\\n        id\\n        title\\n        content\\n        image {\\n          url\\n          alternativeText\\n        }\\n        category {\\n          id\\n          name\\n        }\\n      }\\n    }\\n  }\\n\", {\n              variables: {\n                id: id\n              }\n            });\n\n          case 2:\n            data = _context5.sent;\n            return _context5.abrupt(\"return\", data.category);\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getCategory.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/tony/Developer/Web/_Sandbox/my-blog/blog-frontend/lib/api.js"],"names":["fetchAPI","query","variables","fetch","process","env","API_URL","method","headers","body","JSON","stringify","res","json","errors","console","error","Error","data","getArticles","articles","getArticle","id","article","getCategories","categories","getCategory","category"],"mappings":";;;SAAeA,Q;;;;;uEAAf,iBAAwBC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2EAA+C,EAA/C,EAAiCC,SAAjC,QAAiCA,SAAjC;AAAA;AAAA,mBACoBC,KAAK,WAAIC,OAAO,CAACC,GAAR,CAAYC,OAAhB,eAAmC;AACxDC,cAAAA,MAAM,EAAE,MADgD;AAExDC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAF+C;AAKxDC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBV,gBAAAA,KAAK,EAALA,KADmB;AAEnBC,gBAAAA,SAAS,EAATA;AAFmB,eAAf;AALkD,aAAnC,CADzB;;AAAA;AACQU,YAAAA,GADR;AAAA;AAAA,mBAYqBA,GAAG,CAACC,IAAJ,EAZrB;;AAAA;AAYQA,YAAAA,IAZR;;AAAA,iBAaMA,IAAI,CAACC,MAbX;AAAA;AAAA;AAAA;;AAcIC,YAAAA,OAAO,CAACC,KAAR,CAAcH,IAAI,CAACC,MAAnB;AAdJ,kBAeU,IAAIG,KAAJ,CAAU,qBAAV,CAfV;;AAAA;AAAA,6CAkBSJ,IAAI,CAACK,IAlBd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAqBA,gBAAsBC,WAAtB;AAAA;AAAA;;;0EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcnB,QAAQ,yMADtB;;AAAA;AACCkB,YAAAA,IADD;AAAA,8CAgBEA,IAAI,CAACE,QAhBP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAmBP,gBAAsBC,UAAtB;AAAA;AAAA;;;yEAAO,kBAA0BC,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACctB,QAAQ,gPAiBzB;AAAEE,cAAAA,SAAS,EAAE;AAAEoB,gBAAAA,EAAE,EAAFA;AAAF;AAAb,aAjByB,CADtB;;AAAA;AACCJ,YAAAA,IADD;AAAA,8CAoBEA,IAAI,CAACK,OApBP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAuBP,gBAAsBC,aAAtB;AAAA;AAAA;;;4EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACcxB,QAAQ,0EADtB;;AAAA;AACCkB,YAAAA,IADD;AAAA,8CAOEA,IAAI,CAACO,UAPP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUP,gBAAsBC,WAAtB;AAAA;AAAA;;;0EAAO,kBAA2BJ,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACctB,QAAQ,sSAqBzB;AAAEE,cAAAA,SAAS,EAAE;AAAEoB,gBAAAA,EAAE,EAAFA;AAAF;AAAb,aArByB,CADtB;;AAAA;AACCJ,YAAAA,IADD;AAAA,8CAwBEA,IAAI,CAACS,QAxBP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["async function fetchAPI(query, { variables } = {}) {\n  const res = await fetch(`${process.env.API_URL}/graphql`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n\n  const json = await res.json();\n  if (json.errors) {\n    console.error(json.errors);\n    throw new Error(\"Failed to fetch API\");\n  }\n\n  return json.data;\n}\n\nexport async function getArticles() {\n  const data = await fetchAPI(`query Articles {\n    articles {\n      id\n      title\n      content\n      category {\n        id\n        name\n      }\n      image {\n        url\n        alternativeText\n      }\n    }\n  }`);\n  return data.articles;\n}\n\nexport async function getArticle(id) {\n  const data = await fetchAPI(\n    `query Articles($id: ID!) {\n    article(id: $id) {\n      id\n      title\n      content\n      image {\n        url\n        alternativeText\n      }\n      category {\n        id\n        name\n      }\n      published_at\n    }\n  }`,\n    { variables: { id } }\n  );\n  return data.article;\n}\n\nexport async function getCategories() {\n  const data = await fetchAPI(`query Categories {\n    categories {\n      id\n      name\n    }\n  }`);\n  return data.categories;\n}\n\nexport async function getCategory(id) {\n  const data = await fetchAPI(\n    `query Category($id: ID!) {\n    category(id: $id) {\n      id\n      name\n      articles {\n        id\n        title\n        content\n        image {\n          url\n          alternativeText\n        }\n        category {\n          id\n          name\n        }\n      }\n    }\n  }\n`,\n    { variables: { id } }\n  );\n  return data.category;\n}\n"]},"metadata":{},"sourceType":"module"}